/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Reservation as PrismaReservation,
  Appointment as PrismaAppointment,
  Service as PrismaService,
  User as PrismaUser,
} from "@prisma/client";

export class ReservationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReservationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reservation.count(args);
  }

  async reservations<T extends Prisma.ReservationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReservationFindManyArgs>
  ): Promise<PrismaReservation[]> {
    return this.prisma.reservation.findMany<Prisma.ReservationFindManyArgs>(
      args
    );
  }
  async reservation<T extends Prisma.ReservationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReservationFindUniqueArgs>
  ): Promise<PrismaReservation | null> {
    return this.prisma.reservation.findUnique(args);
  }
  async createReservation<T extends Prisma.ReservationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReservationCreateArgs>
  ): Promise<PrismaReservation> {
    return this.prisma.reservation.create<T>(args);
  }
  async updateReservation<T extends Prisma.ReservationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReservationUpdateArgs>
  ): Promise<PrismaReservation> {
    return this.prisma.reservation.update<T>(args);
  }
  async deleteReservation<T extends Prisma.ReservationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReservationDeleteArgs>
  ): Promise<PrismaReservation> {
    return this.prisma.reservation.delete(args);
  }

  async getAppointment(parentId: string): Promise<PrismaAppointment | null> {
    return this.prisma.reservation
      .findUnique({
        where: { id: parentId },
      })
      .appointment();
  }

  async getService(parentId: string): Promise<PrismaService | null> {
    return this.prisma.reservation
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.reservation
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
